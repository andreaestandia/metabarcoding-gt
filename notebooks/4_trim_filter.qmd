---
  title: "Step 4: Trim and filter"
author: "Andrea Estandia"
date: "`r Sys.Date()`"
format: html
editor_options: 
  chunk_output_type: console
---
  
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source(here::here("src", "metabarcoding-gt.R"))
install_required_packages()
```

```{r}
trimlength1 <- 120  # Forward still looks fine at 250
trimlength2 <- 100  # Reverse read quality drops fast, try 140 or even 120
maxEE_read1 <- 2
maxEE_read2 <- 2    # Loosen expected error threshold for reverse reads
truncQ <- 2
minlength <- 50
subset <- FALSE
marker <- "16s" 
```


```{r}
fnFs.cut <- readRDS(file.path(LOCUS_DIR, "R_objects", "02_fnFs.cut.rds"))
fnRs.cut <- readRDS(file.path(LOCUS_DIR, "R_objects", "02_fnRs.cut.rds"))

## set up filepaths for output files
fnFs.filtN <- file.path(LOCUS_DIR, "filtered_trimmed", basename(fnFs.cut))
fnRs.filtN <- file.path(LOCUS_DIR, "filtered_trimmed", basename(fnRs.cut))

```

```{r}
all_args <- paste0(
  "truncLen=c(", trimlength1, ",", trimlength2, "), ",
  "maxEE=c(", maxEE_read1, ",", maxEE_read2, "), ",
  "truncQ=", truncQ, ", ",
  "minLen=", minlength
)

# Run filterAndTrim
if (subset) {
  out <- eval(parse(text = paste0(
    "filterAndTrim(fnFs.cut[1:2], fnFs.filtN[1:2], fnRs.cut[1:2], fnRs.filtN[1:2], maxN = Inf, ", all_args, ")"
  )))
} else {
  out <- eval(parse(text = paste0(
    "filterAndTrim(fnFs.cut, fnFs.filtN, fnRs.cut, fnRs.filtN, verbose = TRUE, maxN = 0, ", all_args, ")"
  )))
}

# Save outputs
saveRDS(fnFs.filtN, file = file.path(LOCUS_DIR, "R_objects", "04_fnFs.filtN.rds"))
saveRDS(fnRs.filtN, file = file.path(LOCUS_DIR, "R_objects", "04_fnRs.filtN.rds"))
saveRDS(out, file = file.path(LOCUS_DIR, "R_objects", "04_out.rds"))

# Plot quality profiles
pdf_name <- if (!is.null(marker)) {
  file.path(LOCUS_DIR, paste0("plots", "/", "04_", marker, "_post_trim_quality_plots.pdf"))
} else {
  file.path(LOCUS_DIR, "plots", "04_post_trim_quality_plots.pdf")
}

pdf(file = pdf_name, width = 10, height = 10)
plotQualityProfile(fnFs.filtN[1:2])
plotQualityProfile(fnRs.filtN[1:2])
dev.off()

```

